Тема: Розробка програмної системи для моніторингу акваріумів 
Метою даної роботи було створення програмної системи, що забезпечує 
управління акваріумами, сенсорами, моніторинг параметрів навколишнього 
середовища та інтерактивну взаємодію користувачів через REST API. Для 
реалізації було використано Python з такими бібліотеками, як FastAPI і 
SQLAlchemy для роботи з базою даних, Scikit-learn для аналізу трендів, а також 
MySQL для зберігання даних. Тестування API здійснювалося за допомогою 
Postman, а сервер запускався через Uvicorn. 
Система орієнтована на три основні типи користувачів: адміністратора, 
техніка та клієнта. Основна функціональність включає управління об'єктами 
(техніками, акваріумами та сенсорами), реєстрацію даних сенсорів, їхній аналіз 
для виявлення трендів (зокрема температурних), а також збереження системних 
логів для відстеження дій користувачів. Було реалізовано REST API з 
ендпоінтами, що дозволяють додавати, переглядати, оновлювати та видаляти 
дані про техніків, акваріуми та сенсори, а також отримувати інформацію про 
параметри навколишнього середовища у вибраному часі чи за ідентифікатором. 
Особливу увагу було приділено аналізу трендів. Для цього 
використовувалася лінійна регресія з бібліотеки Scikit-learn. Наприклад, для 
сенсора з ідентифікатором 1 аналіз показав, що температура поступово 
підвищується. Це було відображено у відповіді API: "З часом температура 
підвищується." Крім того, кожна дія користувача в системі фіксувалася у 
таблиці логів із зазначенням операції, часу, ідентифікатора користувача та 
деталей. Наприклад, запис у системному логу виглядає так: "Delete Technician", 
"Timestamp": "2025-01-13 15:32:10", "UserID": 2, "Details": "Deleted technician 
with ID 5." 
У результаті виконання роботи було створено програмну систему, яка 
відповідає заданій функціональності. Вона дозволяє ефективно керувати 
даними, проводити аналіз і забезпечує гнучку інтеграцію через REST API. 
Система продемонструвала свою працездатність у процесі тестування, що 
свідчить про її готовність до використання в реальних умовах. 
До звіту додаються додаткові матеріали, включаючи код програми, ER
діаграму бази даних і приклади JSON-запитів. Усі завдання були виконані 
успішно, і система підтвердила свою функціональність.