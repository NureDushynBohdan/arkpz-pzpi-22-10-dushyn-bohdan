У цьому проекті розроблена система для моніторингу та керування акваріумами 
за допомогою IoT-сенсорів. Система збирає дані з сенсорів, зберігає їх в базі 
даних та дозволяє адміністратору здійснювати аналітику за різними 
параметрами, включаючи температуру, вологість та інші змінні. 
• Обробка даних сенсорів: Всі дані, які надходять від сенсорів, 
обробляються через серверну частину, де відбувається зберігання, 
фільтрація та обчислення трендів за допомогою математичних моделей, 
зокрема лінійної регресії для температурних трендів. 
• Адміністрування та логування: Для адміністраторів надано можливість 
переглядати системні логи та генерувати звіти щодо операцій в системі за 
вказаний період. 
• Фільтрація даних за часовим проміжком: Операції фільтрації даних 
сенсорів здійснюються за допомогою вказівки часових рамок для 
конкретних записів. 
Ці можливості забезпечують зручну та ефективну роботу з системою 
моніторингу акваріумів, полегшуючи адміністрування та оптимізацію процесів 
 
Бізнес-логіка (математичні методи обробки даних) 
@app.get("/api/temperature-trend/{sensor_id}", response_model=SensorTrendReport) 
def analyze_trends(sensor_id: int, db: Session = Depends(get_db)): 
    data = db.query(SensorDataInDB).filter(SensorDataInDB.sensor_id == 
sensor_id).all() 
    timestamps = np.array([d.timestamp.timestamp() for d in data]).reshape(-1, 1) 
    temperatures = np.array([d.temperature for d in data]) 
     
    model = LinearRegression() 
    model.fit(timestamps, temperatures) 
     
    trend = model.coef_[0] 
    if trend > 0: 
        trend_description = "З часом температура підвищується." 
    elif trend < 0: 
        trend_description = "З часом температура знижується." 
    else: 
        trend_description = "Температура стабільна протягом тривалого часу." 
 
    return { 
        "sensor_id": sensor_id,  
        "coefficient": float(trend),  
        "trend_description": trend_description 
    } 
У цьому коді ми визначаємо тренд температури, аналізуючи часові мітки та 
значення температури. Лінійна регресія дозволяє оцінити, чи є зростання, 
зменшення або стабільність температури в часі. 
Отримання логів через API 
@app.get("/admin/logs/") 
def get_system_logs(db: Session = Depends(get_db)): 
    logs = db.query(SystemLog).order_by(SystemLog.Timestamp.desc()).all() 
    return logs 
Цей метод дозволяє отримувати всі логи операцій у системі, відсортовані за 
датою. Це корисно для адміністраторів, щоб відслідковувати дії користувачів та 
системні події. 
Генерація звітів за заданим періодом 
@app.get("/admin/reports/") 
def generate_system_report(start_date: str, end_date: str, db: Session = 
Depends(get_db)): 
    try: 
        start = datetime.strptime(start_date, "%Y-%m-%d") 
        end = datetime.strptime(end_date, "%Y-%m-%d") 
    except ValueError: 
        raise HTTPException(status_code=400, detail="Invalid date format. Use YYYY
MM-DD") 
     
    logs = db.query(SystemLog).filter( 
        SystemLog.Timestamp >= start, 
        SystemLog.Timestamp <= end 
    ).order_by(SystemLog.Timestamp.desc()).all() 
     
    report = [{"Operation": log.Operation, "Timestamp": log.Timestamp, "UserID": 
log.UserID, "Details": log.Details} for log in logs] 
    return {"report": report, "count": len(report)} 
Цей метод генерує звіт по всіх діях, що відбулися в системі за задані дати. Звіти 
допомагають адміністратору аналізувати дії користувачів та визначати 
ефективність роботи системи. 
 Отримання даних по сенсору за його ID 
@app.get("/api/sensor-data/{sensor_id}", response_model=List[SensorDataResponse]) 
def get_sensor_data_by_id(sensor_id: int, db: Session = Depends(get_db)): 
    data = db.query(SensorDataInDB).filter(SensorDataInDB.sensor_id == 
sensor_id).all() 
    if not data: 
        raise HTTPException(status_code=404, detail=f"No data found for sensor_id 
{sensor_id}") 
    return data 
Цей API-метод дозволяє отримувати всі дані, що зібрані для конкретного 
сенсора за його ID. 
  
 
 
Фільтрація даних сенсорів за часовим проміжком 
 
@app.get("/api/sensor-data/filter", response_model=List[SensorDataResponse]) 
def get_sensor_data_by_time_range(start_date: str, end_date: str, db: Session = 
Depends(get_db)): 
    try: 
        start = datetime.strptime(start_date, "%Y-%m-%d") 
        end = datetime.strptime(end_date, "%Y-%m-%d") 
    except ValueError: 
        raise HTTPException(status_code=400, detail="Invalid date format. Use YYYY
MM-DD") 
     
    data = db.query(SensorDataInDB).filter( 
        SensorDataInDB.timestamp >= start, 
        SensorDataInDB.timestamp <= end 
    ).all() 
     
    if not data: 
        raise HTTPException(status_code=404, detail=f"No data found for the given 
time range ({start_date} to {end_date})") 
     
    return data 
 
Цей метод дозволяє користувачам фільтрувати дані сенсорів за часовим 
проміжком, що є корисним для аналізу даних в конкретний період часу. 
